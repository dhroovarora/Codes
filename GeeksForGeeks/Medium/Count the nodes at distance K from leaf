https://www.geeksforgeeks.org/problems/node-at-distance/1




/*struct NodeGiven a binary tree with n nodes and a non-negative integer k, the task is to count the number of special nodes. A node is considered special if there exists at least one leaf in its subtree such that the distance between the node and leaf is exactly k.
{
	int data;
	Node *left, *right;
};*/

class Solution
{
    public:
    //Function to return count of nodes at a given distance from leaf nodes.
    void helper(Node *root,unordered_map<Node*,Node*> &parent,unordered_set<Node*> &leaf){
        if(!root)
            return;
        if(!root->left && !root->right)
            leaf.insert(root);
        if(root->left)
            parent[root->left] = root;
        if(root->right)
            parent[root->right] = root;
        helper(root->left,parent,leaf);
        helper(root->right,parent,leaf);
    }
    int printKDistantfromLeaf(Node* root, int k)
    {
    	//Add your code here. 
    	unordered_map<Node*,Node*> parent;
    	unordered_set<Node*> leaf;
    	unordered_set<Node*> ans;
    	helper(root,parent,leaf);
    	for(auto it : leaf){
    	    int i=0;
    	    Node *play = it;
    	    while(i<k && play != root){
    	        play = parent[play];
    	        ++i;
    	    }
    	    if(i == k){
    	        ans.insert(play);
    	    }
    	}
    	return ans.size();
    }
};